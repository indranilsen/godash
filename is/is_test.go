package is

import (
	"fmt"
	"reflect"
	"testing"
)

func TestErrAllTypeCheck(t *testing.T) {
	var i int = 1000
	var i8 int8 = 8
	var i16 int16 = 16
	var i32 int32 = 32
	var i64 int64 = 64

	var u uint = 1000
	var u8 uint8 = 8
	var u16 uint16 = 16
	var u32 uint32 = 32
	var u64 uint64 = 64

	var f32 float32 = 3.2
	var f64 float64 = 6.4

	var b bool = true
	var s string = "string"

	var c64 complex64 = 64 + 1i
	var c128 complex128 = 128 + 1i

	functions := map[string]interface{}{
		"Int":        Int,
		"Int8":       Int8,
		"Int16":      Int16,
		"Int32":      Int32,
		"Int64":      Int64,
		"UInt":       UInt,
		"UInt8":      UInt8,
		"UInt16":     UInt16,
		"UInt32":     UInt32,
		"UInt64":     UInt64,
		"Float32":    Float32,
		"Float64":    Float64,
		"Complex64":  Complex64,
		"Complex128": Complex128,
		"String":     String,
		"Bool":       Bool,
	}

	TypeCheckTests := []struct {
		input  interface{}
		name   string
		result bool
	}{{
		input:  i,
		name:   "Int",
		result: true,
	}, {
		input:  i8,
		name:   "Int",
		result: false,
	}, {
		input:  i16,
		name:   "Int",
		result: false,
	}, {
		input:  i32,
		name:   "Int",
		result: false,
	}, {
		input:  i64,
		name:   "Int",
		result: false,
	}, {
		input:  u,
		name:   "Int",
		result: false,
	}, {
		input:  u8,
		name:   "Int",
		result: false,
	}, {
		input:  u16,
		name:   "Int",
		result: false,
	}, {
		input:  u32,
		name:   "Int",
		result: false,
	}, {
		input:  u64,
		name:   "Int",
		result: false,
	}, {
		input:  f32,
		name:   "Int",
		result: false,
	}, {
		input:  f64,
		name:   "Int",
		result: false,
	}, {
		input:  c64,
		name:   "Int",
		result: false,
	}, {
		input:  c128,
		name:   "Int",
		result: false,
	}, {
		input:  b,
		name:   "Int",
		result: false,
	}, {
		input:  s,
		name:   "Int",
		result: false,
	}, {
		input:  i8,
		name:   "Int8",
		result: true,
	}, {
		input:  i64,
		name:   "Int8",
		result: false,
	}, {
		input:  u,
		name:   "Int8",
		result: false,
	}, {
		input:  f32,
		name:   "Int8",
		result: false,
	}, {
		input:  c128,
		name:   "Int8",
		result: false,
	}, {
		input:  b,
		name:   "Int8",
		result: false,
	}, {
		input:  s,
		name:   "Int8",
		result: false,
	}, {
		input:  i16,
		name:   "Int16",
		result: true,
	}, {
		input:  i64,
		name:   "Int16",
		result: false,
	}, {
		input:  u,
		name:   "Int16",
		result: false,
	}, {
		input:  f32,
		name:   "Int16",
		result: false,
	}, {
		input:  c128,
		name:   "Int16",
		result: false,
	}, {
		input:  b,
		name:   "Int16",
		result: false,
	}, {
		input:  s,
		name:   "Int16",
		result: false,
	}, {
		input:  i32,
		name:   "Int32",
		result: true,
	}, {
		input:  i64,
		name:   "Int32",
		result: false,
	}, {
		input:  u,
		name:   "Int32",
		result: false,
	}, {
		input:  f32,
		name:   "Int32",
		result: false,
	}, {
		input:  c128,
		name:   "Int32",
		result: false,
	}, {
		input:  b,
		name:   "Int32",
		result: false,
	}, {
		input:  s,
		name:   "Int32",
		result: false,
	}, {
		input:  i64,
		name:   "Int64",
		result: true,
	}, {
		input:  i,
		name:   "Int64",
		result: false,
	}, {
		input:  u,
		name:   "Int64",
		result: false,
	}, {
		input:  f32,
		name:   "Int64",
		result: false,
	}, {
		input:  c128,
		name:   "Int64",
		result: false,
	}, {
		input:  b,
		name:   "Int64",
		result: false,
	}, {
		input:  s,
		name:   "Int64",
		result: false,
	}, {
		input:  u,
		name:   "UInt",
		result: true,
	}, {
		input:  i64,
		name:   "UInt",
		result: false,
	}, {
		input:  u64,
		name:   "UInt",
		result: false,
	}, {
		input:  f32,
		name:   "UInt",
		result: false,
	}, {
		input:  c128,
		name:   "UInt",
		result: false,
	}, {
		input:  b,
		name:   "UInt",
		result: false,
	}, {
		input:  s,
		name:   "UInt",
		result: false,
	}, {
		input:  u8,
		name:   "UInt8",
		result: true,
	}, {
		input:  i64,
		name:   "UInt8",
		result: false,
	}, {
		input:  u64,
		name:   "UInt8",
		result: false,
	}, {
		input:  f32,
		name:   "UInt8",
		result: false,
	}, {
		input:  c128,
		name:   "UInt8",
		result: false,
	}, {
		input:  b,
		name:   "UInt8",
		result: false,
	}, {
		input:  s,
		name:   "UInt8",
		result: false,
	}, {
		input:  u16,
		name:   "UInt16",
		result: true,
	}, {
		input:  i64,
		name:   "UInt16",
		result: false,
	}, {
		input:  u64,
		name:   "UInt16",
		result: false,
	}, {
		input:  f32,
		name:   "UInt16",
		result: false,
	}, {
		input:  c128,
		name:   "UInt16",
		result: false,
	}, {
		input:  b,
		name:   "UInt16",
		result: false,
	}, {
		input:  s,
		name:   "UInt16",
		result: false,
	}, {
		input:  u32,
		name:   "UInt32",
		result: true,
	}, {
		input:  i64,
		name:   "UInt32",
		result: false,
	}, {
		input:  u64,
		name:   "UInt32",
		result: false,
	}, {
		input:  f32,
		name:   "UInt32",
		result: false,
	}, {
		input:  c128,
		name:   "UInt32",
		result: false,
	}, {
		input:  b,
		name:   "UInt32",
		result: false,
	}, {
		input:  s,
		name:   "UInt32",
		result: false,
	}, {
		input:  u64,
		name:   "UInt64",
		result: true,
	}, {
		input:  i64,
		name:   "UInt64",
		result: false,
	}, {
		input:  u,
		name:   "UInt64",
		result: false,
	}, {
		input:  f32,
		name:   "UInt64",
		result: false,
	}, {
		input:  c128,
		name:   "UInt64",
		result: false,
	}, {
		input:  b,
		name:   "UInt64",
		result: false,
	}, {
		input:  s,
		name:   "UInt64",
		result: false,
	}, {
		input:  f32,
		name:   "Float32",
		result: true,
	}, {
		input:  i64,
		name:   "Float32",
		result: false,
	}, {
		input:  u,
		name:   "Float32",
		result: false,
	}, {
		input:  f64,
		name:   "Float32",
		result: false,
	}, {
		input:  c128,
		name:   "Float32",
		result: false,
	}, {
		input:  b,
		name:   "Float32",
		result: false,
	}, {
		input:  s,
		name:   "Float32",
		result: false,
	}, {
		input:  f64,
		name:   "Float64",
		result: true,
	}, {
		input:  i64,
		name:   "Float64",
		result: false,
	}, {
		input:  u,
		name:   "Float64",
		result: false,
	}, {
		input:  f32,
		name:   "Float64",
		result: false,
	}, {
		input:  c128,
		name:   "Float64",
		result: false,
	}, {
		input:  b,
		name:   "Float64",
		result: false,
	}, {
		input:  s,
		name:   "Float64",
		result: false,
	}, {
		input:  c64,
		name:   "Complex64",
		result: true,
	}, {
		input:  i64,
		name:   "Complex64",
		result: false,
	}, {
		input:  u,
		name:   "Complex64",
		result: false,
	}, {
		input:  f32,
		name:   "Complex64",
		result: false,
	}, {
		input:  c128,
		name:   "Complex64",
		result: false,
	}, {
		input:  b,
		name:   "Complex64",
		result: false,
	}, {
		input:  s,
		name:   "Complex64",
		result: false,
	}, {
		input:  c128,
		name:   "Complex128",
		result: true,
	}, {
		input:  i64,
		name:   "Complex128",
		result: false,
	}, {
		input:  u,
		name:   "Complex128",
		result: false,
	}, {
		input:  f32,
		name:   "Complex128",
		result: false,
	}, {
		input:  c64,
		name:   "Complex128",
		result: false,
	}, {
		input:  b,
		name:   "Complex128",
		result: false,
	}, {
		input:  s,
		name:   "Complex128",
		result: false,
	}, {
		input:  b,
		name:   "Bool",
		result: true,
	}, {
		input:  i64,
		name:   "Bool",
		result: false,
	}, {
		input:  u,
		name:   "Bool",
		result: false,
	}, {
		input:  f32,
		name:   "Bool",
		result: false,
	}, {
		input:  c64,
		name:   "Bool",
		result: false,
	}, {
		input:  s,
		name:   "Bool",
		result: false,
	}, {
		input:  s,
		name:   "String",
		result: true,
	}, {
		input:  i64,
		name:   "String",
		result: false,
	}, {
		input:  u,
		name:   "String",
		result: false,
	}, {
		input:  f32,
		name:   "String",
		result: false,
	}, {
		input:  c64,
		name:   "String",
		result: false,
	}, {
		input:  b,
		name:   "String",
		result: false,
	}}

	for _, test := range TypeCheckTests {
		res := functions[test.name].(func(interface{}) bool)(test.input)
		if res != test.result {
			fmt.Println(test.result, reflect.TypeOf(res))
			fmt.Println(res, reflect.TypeOf(res))
			t.Fail()
		}
	}
}
